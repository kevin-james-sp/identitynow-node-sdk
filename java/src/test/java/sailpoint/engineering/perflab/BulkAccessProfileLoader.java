package sailpoint.engineering.perflab;

import com.google.gson.Gson;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Assert;
import sailpoint.services.idn.console.Log4jUtils;
import sailpoint.services.idn.sdk.ClientCredentials;
import sailpoint.services.idn.sdk.EnvironmentCredentialer;
import sailpoint.services.idn.sdk.IdentityNowService;
import sailpoint.services.idn.sdk.object.Identity;
import sailpoint.services.idn.sdk.object.accessprofile.AccessProfile;
import sailpoint.services.idn.sdk.object.entitlement.EntitlementList;
import sailpoint.services.idn.sdk.object.identity.userList.Filter;
import sailpoint.services.idn.sdk.object.identity.userList.Filters;
import sailpoint.services.idn.sdk.object.identity.userList.IdentityList;
import sailpoint.services.idn.sdk.object.identity.userList.Sorter;
import sailpoint.services.idn.sdk.object.identity.userList.Sorters;
import sailpoint.services.idn.sdk.object.source.Source;
import sailpoint.services.idn.sdk.services.AccessProfileService;
import sailpoint.services.idn.sdk.services.EntitlementService;
import sailpoint.services.idn.sdk.services.IdentityService;
import sailpoint.services.idn.sdk.services.SourceService;
import sailpoint.services.idn.session.SessionType;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

public class BulkAccessProfileLoader {

	public final static Logger log = LogManager.getLogger(BulkAccessProfileLoader.class);
	public static void main(String[] args) throws IOException {

		//Creds and logger
		Log4jUtils.boostrapLog4j(Level.DEBUG);

		//pass desired number of profiles through main args
		final String PROFILE_COUNT = args[0];

		ClientCredentials envCreds = EnvironmentCredentialer.getEnvironmentCredentials();
		IdentityNowService ids = new IdentityNowService(envCreds);
		ids.createSession(SessionType.SESSION_TYPE_UI_USER_BASIC, true);
		log.info("Session created");

		try{
			Gson gson = new Gson();
			AccessProfileService _profileService = ids.getAccessProfileService();
			EntitlementService _entitlementService = ids.getEntitlementService();
			SourceService _sourceService = ids.getSourceService();
			IdentityService _identityService = ids.getIdentityService();
			int profileCount = Integer.parseInt(PROFILE_COUNT);

			List<Source> sources = _sourceService.list().execute().body();
			Source profileSource = null;
			for(Source thisSource : sources){
				if(thisSource.getName().equals("Active Directory"))
					profileSource = thisSource;
			}
			Assert.assertNotNull("Unable to find correct source", profileSource);

			EntitlementList entitlements = _entitlementService.list(200, profileSource.getExternalId()).execute().body();

			LinkedList<Filter> filterList = new LinkedList();
			filterList.push(new Filter("name", "support"));
			filterList.push(new Filter("alias", "support"));
			filterList.push(new Filter("email", "support"));
			Filters filters = new Filters("OR", filterList);

			LinkedList<Sorter> sorterList = new LinkedList<Sorter>();
			sorterList.push(new Sorter("name", "ASC"));
			Sorters sorters = new Sorters(sorterList);
			IdentityList identityList = _identityService.customList(String.valueOf(System.currentTimeMillis()),"support", gson.toJson(filters), "1", "1", "0", gson.toJson(sorters)).execute().body();
			Identity supportIdentity = null;
			for(Identity thisIdentity : identityList.getItems()){
				if(thisIdentity.getName().equals("SailPoint Support"))
					supportIdentity = thisIdentity;
			}
			Assert.assertNotNull("Unable to find Support identity", supportIdentity);

			log.info("Begin Profile upload...");
			for(int i = 0; i < profileCount; i++){

				LinkedList<String> profileEntitlements = new LinkedList<>();
				for(int j = 0 ; j < ThreadLocalRandom.current().nextInt(1, 4) ; j++){
					profileEntitlements.push(entitlements.getItems().get(ThreadLocalRandom.current().nextInt(0, 201)).getId());
				}
				AccessProfile profile = new AccessProfile();
				profile.setName("Bulk Profile " + i);
				profile.setSourceId(profileSource.getId());
				profile.setOwnerId(supportIdentity.getId());
				profile.setDescription("Bulk Profile generated by Chandlery SDK");
				profile.setEntitlements(profileEntitlements);

				if(_profileService.accessProfile(profile).execute().isSuccessful())
					log.info("Successfully uploaded profile #" + i);
				else
					log.error("Upload failed for profile #" + i);
			}

		} catch(IOException e){
			log.error("An IOException has occurred.");
			e.printStackTrace();
		}
	}
}
